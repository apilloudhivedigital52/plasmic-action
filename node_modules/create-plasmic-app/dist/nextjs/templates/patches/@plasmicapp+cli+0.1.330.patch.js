"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makePlasmicPatch_plasmicapp_cli = void 0;
function makePlasmicPatch_plasmicapp_cli() {
    return `diff --git a/node_modules/@plasmicapp/cli/dist/actions/sync.d.ts b/node_modules/@plasmicapp/cli/dist/actions/sync.d.ts
index 9ac892e..f696f62 100644
--- a/node_modules/@plasmicapp/cli/dist/actions/sync.d.ts
+++ b/node_modules/@plasmicapp/cli/dist/actions/sync.d.ts
@@ -2,6 +2,7 @@ import { CommonArgs } from "..";
 import { Metadata } from "../utils/get-context";
 export interface SyncArgs extends CommonArgs {
     projects: readonly string[];
+    host: string;
     forceOverwrite: boolean;
     yes?: boolean;
     force?: boolean;
diff --git a/node_modules/@plasmicapp/cli/dist/index.js b/node_modules/@plasmicapp/cli/dist/index.js
index c2e64c2..3a5b8c8 100755
--- a/node_modules/@plasmicapp/cli/dist/index.js
+++ b/node_modules/@plasmicapp/cli/dist/index.js
@@ -503480,7 +503480,7 @@ async function getContext(args, {
   return context;
 }
 async function getCurrentOrDefaultAuth(args) {
-  const auth2 = await getCurrentAuth(args.auth);
+  const auth2 = await getOrStartAuth(args);
   if (auth2) {
     return auth2;
   }
@@ -505802,6 +505802,10 @@ function configureSyncArgs(yags, includeQuietOption = true) {
     describe: "One or more projects to sync, separated by comma. Version constraints can be specified using @. Example: projectid, projectid@>=version",
     type: "array",
     default: []
+  }).option("host", {
+    describe: "Plasmic host to use",
+    type: "string",
+    default: "https://studio.plasmic.app"
   }).option("force", {
     type: "boolean",
     describe: "Force sync to bypass specified version ranges.",
diff --git a/node_modules/@plasmicapp/cli/dist/utils/get-context.d.ts b/node_modules/@plasmicapp/cli/dist/utils/get-context.d.ts
index e9534eb..19189c5 100644
--- a/node_modules/@plasmicapp/cli/dist/utils/get-context.d.ts
+++ b/node_modules/@plasmicapp/cli/dist/utils/get-context.d.ts
@@ -1,7 +1,7 @@
 import { CommonArgs } from "../index";
 import { PlasmicContext, PlasmicLock } from "./config-utils";
 export declare function readLock(lockFile: string): PlasmicLock;
-export declare function getContext(args: CommonArgs, { enableSkipAuth, skipMissingFiles, skipInit, }?: {
+export declare function getContext(args: CommonArgs & { host: string }, { enableSkipAuth, skipMissingFiles, skipInit, }?: {
     enableSkipAuth?: boolean;
     skipMissingFiles?: boolean;
     skipInit?: boolean;
@@ -9,7 +9,7 @@ export declare function getContext(args: CommonArgs, { enableSkipAuth, skipMissi
 /**
  * Use empty user/token to signify no auth (only returning to provide a default host).
  */
-export declare function getCurrentOrDefaultAuth(args: CommonArgs): Promise<import("./config-utils").AuthConfig>;
+export declare function getCurrentOrDefaultAuth(args: CommonArgs & { host: string }): Promise<import("./config-utils").AuthConfig>;
 /**
  * Table of where this metadata will be set
  *
diff --git a/node_modules/@plasmicapp/cli/src/actions/sync.ts b/node_modules/@plasmicapp/cli/src/actions/sync.ts
index 06d5710..e8bddf6 100644
--- a/node_modules/@plasmicapp/cli/src/actions/sync.ts
+++ b/node_modules/@plasmicapp/cli/src/actions/sync.ts
@@ -61,6 +61,7 @@ import { upsertStyleTokens } from "./sync-styles";
 
 export interface SyncArgs extends CommonArgs {
   projects: readonly string[];
+  host: string;
   forceOverwrite: boolean;
   yes?: boolean;
   force?: boolean;
diff --git a/node_modules/@plasmicapp/cli/src/index.ts b/node_modules/@plasmicapp/cli/src/index.ts
index 1ee2787..f21d5bb 100644
--- a/node_modules/@plasmicapp/cli/src/index.ts
+++ b/node_modules/@plasmicapp/cli/src/index.ts
@@ -341,6 +341,11 @@ function configureSyncArgs(
       type: "array",
       default: [],
     })
+    .option("host", {
+      describe: "Plasmic host to use",
+      type: "string",
+      default: "https://studio.plasmic.app",
+    })
     .option("force", {
       type: "boolean",
       describe: "Force sync to bypass specified version ranges.",
diff --git a/node_modules/@plasmicapp/cli/src/utils/auth-utils.ts b/node_modules/@plasmicapp/cli/src/utils/auth-utils.ts
index a72060c..c4e6abe 100644
--- a/node_modules/@plasmicapp/cli/src/utils/auth-utils.ts
+++ b/node_modules/@plasmicapp/cli/src/utils/auth-utils.ts
@@ -242,6 +242,7 @@ export async function getOrStartAuth(
   opts: CommonArgs & { host: string; enableSkipAuth?: boolean }
 ) {
   let auth = await getCurrentAuth(opts.auth);
+  console.log('__DEV__', { auth, opts });
   if (!auth && opts.enableSkipAuth) {
     return;
   }
diff --git a/node_modules/@plasmicapp/cli/src/utils/get-context.ts b/node_modules/@plasmicapp/cli/src/utils/get-context.ts
index e1a36d8..20c1497 100644
--- a/node_modules/@plasmicapp/cli/src/utils/get-context.ts
+++ b/node_modules/@plasmicapp/cli/src/utils/get-context.ts
@@ -8,7 +8,7 @@ import { logger } from "../deps";
 import { CommonArgs } from "../index";
 import { runNecessaryMigrations } from "../migrations/migrations";
 import { HandledError } from "../utils/error";
-import { getCurrentAuth } from "./auth-utils";
+import { getCurrentAuth, getOrStartAuth } from "./auth-utils";
 import {
   DEFAULT_HOST,
   findConfigFile,
@@ -298,7 +298,7 @@ async function resolveMissingFilesInConfig(
 }
 
 export async function getContext(
-  args: CommonArgs,
+  args: CommonArgs & { host: string },
   {
     enableSkipAuth = false,
     skipMissingFiles = false,
@@ -379,8 +379,9 @@ export async function getContext(
 /**
  * Use empty user/token to signify no auth (only returning to provide a default host).
  */
-export async function getCurrentOrDefaultAuth(args: CommonArgs) {
-  const auth = await getCurrentAuth(args.auth);
+export async function getCurrentOrDefaultAuth(args: CommonArgs & { host: string }) {
+  // const auth = await getCurrentAuth(args.auth);
+  const auth = await getOrStartAuth(args);
   if (auth) {
     return auth;
   }`;
}
exports.makePlasmicPatch_plasmicapp_cli = makePlasmicPatch_plasmicapp_cli;
