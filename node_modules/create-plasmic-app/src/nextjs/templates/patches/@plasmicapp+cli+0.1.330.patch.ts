export function makePlasmicPatch_plasmicapp_cli(): string {
    return `diff --git a/node_modules/@plasmicapp/cli/dist/actions/sync.d.ts b/node_modules/@plasmicapp/cli/dist/actions/sync.d.ts
index 9ac892e..f696f62 100644
--- a/node_modules/@plasmicapp/cli/dist/actions/sync.d.ts
+++ b/node_modules/@plasmicapp/cli/dist/actions/sync.d.ts
@@ -2,6 +2,7 @@ import { CommonArgs } from "..";
 import { Metadata } from "../utils/get-context";
 export interface SyncArgs extends CommonArgs {
     projects: readonly string[];
+    host: string;
     forceOverwrite: boolean;
     yes?: boolean;
     force?: boolean;
diff --git a/node_modules/@plasmicapp/cli/dist/index.js b/node_modules/@plasmicapp/cli/dist/index.js
index c2e64c2..670452a 100755
--- a/node_modules/@plasmicapp/cli/dist/index.js
+++ b/node_modules/@plasmicapp/cli/dist/index.js
@@ -501873,7 +501873,7 @@ var handleError = (p) => {
 };
 
 // src/utils/config-utils.ts
-var DEFAULT_HOST = process.env.PLASMIC_DEFAULT_HOST || "https://studio.plasmic.app";
+var DEFAULT_HOST = process.env.PLASMIC_DEFAULT_HOST || "https://squirrel.dev";
 var AUTH_FILE_NAME = ".plasmic.auth";
 var CONFIG_FILE_NAME = "plasmic.json";
 var LOCK_FILE_NAME = "plasmic.lock";
@@ -502270,7 +502270,7 @@ var PlasmicApi = class {
   }
   get codegenHost() {
     if (!this.auth.host || this.auth.host === DEFAULT_HOST) {
-      return "https://codegen.plasmic.app";
+      return "https://api.squirrel.dev";
     } else {
       return this.auth.host;
     }
@@ -503432,7 +503432,7 @@ async function getContext(args, {
 } = {}) {
   if (!args.baseDir)
     args.baseDir = process.cwd();
-  const auth2 = enableSkipAuth ? await getCurrentOrDefaultAuth(args) : await getOrInitAuth(args);
+  const auth2 = enableSkipAuth ? await getCurrentOrDefaultAuth({ ...args, enableSkipAuth }) : await getOrInitAuth(args);
   if (auth2.host.startsWith(DEFAULT_HOST)) {
     Sentry.init({
       dsn: "https://3ed4eb43d28646e381bf3c50cff24bd6@o328029.ingest.sentry.io/5285892"
@@ -503480,12 +503480,13 @@ async function getContext(args, {
   return context;
 }
 async function getCurrentOrDefaultAuth(args) {
-  const auth2 = await getCurrentAuth(args.auth);
+  // const auth2 = await getCurrentAuth(args.auth);
+  const auth2 = await getOrStartAuth(args);
   if (auth2) {
     return auth2;
   }
   return {
-    host: DEFAULT_HOST,
+    host: args.host || DEFAULT_HOST,
     user: "",
     token: ""
   };
@@ -505605,7 +505606,7 @@ import_yargs.default.usage("Usage: $0 <command> [options]").option("auth", {
       describe: "Enable skipping auth, just initialize a plasmic.json",
       type: "boolean",
       default: false
-    }).option("host", getYargsOption("host", "https://studio.plasmic.app")).option("platform", getYargsOption("platform")).option("code-lang", getYargsOption("codeLang")).option("code-scheme", getYargsOption("codeScheme")).option("react-runtime", {
+    }).option("host", getYargsOption("host", DEFAULT_HOST)).option("platform", getYargsOption("platform")).option("code-lang", getYargsOption("codeLang")).option("code-scheme", getYargsOption("codeScheme")).option("react-runtime", {
       describe: "React runtime to use; either classic or automatic",
       choices: ["classic", "automatic"],
       default: "classic"
@@ -505622,7 +505623,7 @@ import_yargs.default.usage("Usage: $0 <command> [options]").option("auth", {
     yags.option("host", {
       describe: "Plasmic host to use",
       type: "string",
-      default: "https://studio.plasmic.app"
+      default: DEFAULT_HOST
     }).option("check", {
       alias: "c",
       describe: "Just verifies if the current credentials are valid.",
@@ -505676,7 +505677,7 @@ import_yargs.default.usage("Usage: $0 <command> [options]").option("auth", {
   (yags) => yags.option("host", {
     describe: "Plasmic host to use",
     type: "string",
-    default: "https://studio.plasmic.app"
+    default: DEFAULT_HOST
   }).option("projects", {
     alias: "p",
     describe: "ID of plasmic project to check",
@@ -505741,7 +505742,7 @@ import_yargs.default.usage("Usage: $0 <command> [options]").option("auth", {
   }).option("host", {
     describe: "Plasmic host to use",
     type: "string",
-    default: "https://studio.plasmic.app"
+    default: DEFAULT_HOST
   }),
   (argv) => handleError(projectToken(argv))
 ).command(
@@ -505754,7 +505755,7 @@ import_yargs.default.usage("Usage: $0 <command> [options]").option("auth", {
   }).option("host", {
     describe: "Plasmic host to use",
     type: "string",
-    default: "https://studio.plasmic.app"
+    default: DEFAULT_HOST
   }).option("format", {
     describe: 'Output format. Either "json", "po" or "lingui"',
     type: "string",
@@ -505802,6 +505803,10 @@ function configureSyncArgs(yags, includeQuietOption = true) {
     describe: "One or more projects to sync, separated by comma. Version constraints can be specified using @. Example: projectid, projectid@>=version",
     type: "array",
     default: []
+  }).option("host", {
+    describe: "Plasmic host to use",
+    type: "string",
+    default: DEFAULT_HOST
   }).option("force", {
     type: "boolean",
     describe: "Force sync to bypass specified version ranges.",
diff --git a/node_modules/@plasmicapp/cli/dist/utils/get-context.d.ts b/node_modules/@plasmicapp/cli/dist/utils/get-context.d.ts
index e9534eb..d5b9980 100644
--- a/node_modules/@plasmicapp/cli/dist/utils/get-context.d.ts
+++ b/node_modules/@plasmicapp/cli/dist/utils/get-context.d.ts
@@ -1,7 +1,7 @@
 import { CommonArgs } from "../index";
 import { PlasmicContext, PlasmicLock } from "./config-utils";
 export declare function readLock(lockFile: string): PlasmicLock;
-export declare function getContext(args: CommonArgs, { enableSkipAuth, skipMissingFiles, skipInit, }?: {
+export declare function getContext(args: CommonArgs & { host: string }, { enableSkipAuth, skipMissingFiles, skipInit, }?: {
     enableSkipAuth?: boolean;
     skipMissingFiles?: boolean;
     skipInit?: boolean;
@@ -9,7 +9,7 @@ export declare function getContext(args: CommonArgs, { enableSkipAuth, skipMissi
 /**
  * Use empty user/token to signify no auth (only returning to provide a default host).
  */
-export declare function getCurrentOrDefaultAuth(args: CommonArgs): Promise<import("./config-utils").AuthConfig>;
+export declare function getCurrentOrDefaultAuth(args: CommonArgs & { host: string; enableSkipAuth?: boolean }): Promise<import("./config-utils").AuthConfig>;
 /**
  * Table of where this metadata will be set
  *
diff --git a/node_modules/@plasmicapp/cli/src/actions/sync.ts b/node_modules/@plasmicapp/cli/src/actions/sync.ts
index 06d5710..e8bddf6 100644
--- a/node_modules/@plasmicapp/cli/src/actions/sync.ts
+++ b/node_modules/@plasmicapp/cli/src/actions/sync.ts
@@ -61,6 +61,7 @@ import { upsertStyleTokens } from "./sync-styles";
 
 export interface SyncArgs extends CommonArgs {
   projects: readonly string[];
+  host: string;
   forceOverwrite: boolean;
   yes?: boolean;
   force?: boolean;
diff --git a/node_modules/@plasmicapp/cli/src/api.ts b/node_modules/@plasmicapp/cli/src/api.ts
index 058fe45..2dfcc68 100644
--- a/node_modules/@plasmicapp/cli/src/api.ts
+++ b/node_modules/@plasmicapp/cli/src/api.ts
@@ -545,7 +545,7 @@ export class PlasmicApi {
 
   private get codegenHost() {
     if (!this.auth.host || this.auth.host === DEFAULT_HOST) {
-      return "https://codegen.plasmic.app";
+      return "https://api.squirrel.dev";
     } else {
       return this.auth.host;
     }
diff --git a/node_modules/@plasmicapp/cli/src/index.ts b/node_modules/@plasmicapp/cli/src/index.ts
index 1ee2787..3fb6f35 100644
--- a/node_modules/@plasmicapp/cli/src/index.ts
+++ b/node_modules/@plasmicapp/cli/src/index.ts
@@ -15,6 +15,7 @@ import { UploadBundleArgs, uploadJsBundle } from "./actions/upload-bundle";
 import { WatchArgs, watchProjects } from "./actions/watch";
 import { handleError } from "./utils/error";
 import { ExportArgs, exportProjectsCli } from "./actions/export";
+import { DEFAULT_HOST } from "@plasmicapp/cli/src/utils/config-utils";
 
 if (process.env.DEBUG_CHDIR) {
   process.chdir(process.env.DEBUG_CHDIR);
@@ -59,7 +60,7 @@ yargs
           type: "boolean",
           default: false,
         })
-        .option("host", getYargsOption("host", "https://studio.plasmic.app"))
+        .option("host", getYargsOption("host", DEFAULT_HOST))
         .option("platform", getYargsOption("platform"))
         .option("code-lang", getYargsOption("codeLang"))
         .option("code-scheme", getYargsOption("codeScheme"))
@@ -89,7 +90,7 @@ yargs
         .option("host", {
           describe: "Plasmic host to use",
           type: "string",
-          default: "https://studio.plasmic.app",
+          default: DEFAULT_HOST,
         })
         .option("check", {
           alias: "c",
@@ -153,7 +154,7 @@ yargs
         .option("host", {
           describe: "Plasmic host to use",
           type: "string",
-          default: "https://studio.plasmic.app",
+          default: DEFAULT_HOST,
         })
         .option("projects", {
           alias: "p",
@@ -243,7 +244,7 @@ yargs
         .option("host", {
           describe: "Plasmic host to use",
           type: "string",
-          default: "https://studio.plasmic.app",
+          default: DEFAULT_HOST,
         }),
     (argv) => handleError(projectToken.projectToken(argv))
   )
@@ -261,7 +262,7 @@ yargs
         .option("host", {
           describe: "Plasmic host to use",
           type: "string",
-          default: "https://studio.plasmic.app",
+          default: DEFAULT_HOST,
         })
         .option("format", {
           describe: 'Output format. Either "json", "po" or "lingui"',
@@ -341,6 +342,11 @@ function configureSyncArgs(
       type: "array",
       default: [],
     })
+    .option("host", {
+      describe: "Plasmic host to use",
+      type: "string",
+      default: DEFAULT_HOST,
+    })
     .option("force", {
       type: "boolean",
       describe: "Force sync to bypass specified version ranges.",
diff --git a/node_modules/@plasmicapp/cli/src/utils/config-utils.ts b/node_modules/@plasmicapp/cli/src/utils/config-utils.ts
index 739918c..18bf440 100644
--- a/node_modules/@plasmicapp/cli/src/utils/config-utils.ts
+++ b/node_modules/@plasmicapp/cli/src/utils/config-utils.ts
@@ -12,7 +12,7 @@ import {
 } from "./file-utils";
 
 export const DEFAULT_HOST =
-  process.env.PLASMIC_DEFAULT_HOST || "https://studio.plasmic.app";
+  process.env.PLASMIC_DEFAULT_HOST || "https://squirrel.dev";
 
 // Default filenames
 export const AUTH_FILE_NAME = ".plasmic.auth";
diff --git a/node_modules/@plasmicapp/cli/src/utils/get-context.ts b/node_modules/@plasmicapp/cli/src/utils/get-context.ts
index e1a36d8..ed6bd30 100644
--- a/node_modules/@plasmicapp/cli/src/utils/get-context.ts
+++ b/node_modules/@plasmicapp/cli/src/utils/get-context.ts
@@ -8,7 +8,7 @@ import { logger } from "../deps";
 import { CommonArgs } from "../index";
 import { runNecessaryMigrations } from "../migrations/migrations";
 import { HandledError } from "../utils/error";
-import { getCurrentAuth } from "./auth-utils";
+import { getCurrentAuth, getOrStartAuth } from "./auth-utils";
 import {
   DEFAULT_HOST,
   findConfigFile,
@@ -298,7 +298,7 @@ async function resolveMissingFilesInConfig(
 }
 
 export async function getContext(
-  args: CommonArgs,
+  args: CommonArgs & { host: string },
   {
     enableSkipAuth = false,
     skipMissingFiles = false,
@@ -311,7 +311,7 @@ export async function getContext(
 ): Promise<PlasmicContext> {
   if (!args.baseDir) args.baseDir = process.cwd();
   const auth = enableSkipAuth
-    ? await getCurrentOrDefaultAuth(args)
+    ? await getCurrentOrDefaultAuth({ ...args, enableSkipAuth })
     : await getOrInitAuth(args);
 
   /** Sentry */
@@ -379,14 +379,15 @@ export async function getContext(
 /**
  * Use empty user/token to signify no auth (only returning to provide a default host).
  */
-export async function getCurrentOrDefaultAuth(args: CommonArgs) {
-  const auth = await getCurrentAuth(args.auth);
+export async function getCurrentOrDefaultAuth(args: CommonArgs & { host: string; enableSkipAuth?: boolean }) {
+  // const auth = await getCurrentAuth(args.auth);
+  const auth = await getOrStartAuth(args);
   if (auth) {
     return auth;
   }
 
   return {
-    host: DEFAULT_HOST,
+    host: args.host || DEFAULT_HOST,
     user: "",
     token: "",
   };`;
}
